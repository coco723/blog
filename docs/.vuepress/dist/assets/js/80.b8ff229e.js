(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{469:function(r,t,e){"use strict";e.r(t);var s=e(54),a=Object(s.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"egg应用自定义4xx和5xx的方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#egg应用自定义4xx和5xx的方案"}},[r._v("#")]),r._v(" egg应用自定义4XX和5XX的方案")]),r._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/eggjs/egg/issues/1086",target:"_blank",rel:"noopener noreferrer"}},[r._v("转载"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("现在的错误处理插件是"),e("a",{attrs:{href:"https://github.com/eggjs/egg-onerror",target:"_blank",rel:"noopener noreferrer"}},[r._v("egg-onerror"),e("OutboundLink")],1),r._v("，但这个插件主要是优雅处理为捕获异常，也就是为了让应用不挂进行兜底，但是现在没有一种同意的业务员错误处理方案。")]),r._v(" "),e("h2",{attrs:{id:"问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[r._v("#")]),r._v(" 问题")]),r._v(" "),e("h3",{attrs:{id:"业务校验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#业务校验"}},[r._v("#")]),r._v(" 业务校验")]),r._v(" "),e("p",[r._v("比如参数校验、业务演这个等等，这些并不术语异常，一般会在响应时专程对应的数据格式。常见的处理方式是接口返回错误，并在response转换")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("class User extends Controller {\n  async show() {\n    const error = this.check(this.params.id);\n    if (error) {\n      this.ctx.status = 422;\n      this.ctx.body {\n        message: error.message,\n      };\n      return;\n    }\n\n    // 继续处理\n  }\n\n  check(id) {\n    if (!id) return { message: 'id is required' };\n  }\n}\n")])])]),e("p",[r._v("但是业务场景是非常复杂的，可能在controller里面调用多层service，这样就必须把错误结果一层层传递。所以这种场景业务校验推荐使用异常的方式，类似上面的场景只需要抛出一个异常")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("class User extends Controller {\n  async show() {\n    this.check(this.params.id);\n\n    // 继续处理\n  }\n\n  check(id) {\n    if (!id) throw new Error('id is required');\n  }\n}\n")])])]),e("p",[r._v("然后再中间件处理这个异常")]),r._v(" "),e("h2",{attrs:{id:"异常类型区分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常类型区分"}},[r._v("#")]),r._v(" 异常类型区分")]),r._v(" "),e("p",[r._v("上面的示例也同样抛出Error，如果不写中间件处理同样回走到"),e("a",{attrs:{href:"https://github.com/eggjs/egg-onerror",target:"_blank",rel:"noopener noreferrer"}},[r._v("oneror"),e("OutboundLink")],1),r._v("插件，根据惠泽会打印错误日志并返回500.")]),r._v(" "),e("p",[r._v("这不是我们期望的，开发者希望但会正确的格式，比如status是422，body是一个含错误信息的json。所以我们需要明确已知异常和为捕获异常，并对他们做差异处理")]),r._v(" "),e("h2",{attrs:{id:"标准化响应"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标准化响应"}},[r._v("#")]),r._v(" 标准化响应")]),r._v(" "),e("p",[r._v("如果在写一个api server的时候，希望响应格式是规范的，而开发者一般都比较关注正常结果，异常时会返回格式，所以对于一个API Server来说这也是非常重要的。")]),r._v(" "),e("h2",{attrs:{id:"内容协商"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容协商"}},[r._v("#")]),r._v(" 内容协商")]),r._v(" "),e("p",[r._v("有些应用会根据content-type来返回对应数据，这种情况错误处理也需要根据这种场景来返回相应的结果")]),r._v(" "),e("h3",{attrs:{id:"spec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spec"}},[r._v("#")]),r._v(" Spec")]),r._v(" "),e("h3",{attrs:{id:"错误定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#错误定义"}},[r._v("#")]),r._v(" 错误定义")]),r._v(" "),e("h4",{attrs:{id:"种类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#种类"}},[r._v("#")]),r._v(" 种类")]),r._v(" "),e("p",[r._v("错误分为三种未捕获异常、系统异常、业务异常，以下是分类比较")]),r._v(" "),e("table",[e("thead",[e("tr",[e("th",[r._v("定义")]),r._v(" "),e("th",[r._v("未捕获异常")]),r._v(" "),e("th",[r._v("系统异常")]),r._v(" "),e("th",[r._v("业务错误")])])]),r._v(" "),e("tbody",[e("tr",[e("td",[r._v("类名")]),r._v(" "),e("td",[r._v("Error")]),r._v(" "),e("td",[r._v("xxxException")]),r._v(" "),e("td",[r._v("xxxBizError")])]),r._v(" "),e("tr",[e("td",[r._v("说明")]),r._v(" "),e("td",[r._v("js内置错误，未做任何处理")]),r._v(" "),e("td",[r._v("自己抛出的系统异常")]),r._v(" "),e("td",[r._v("自己跑出的业务异常")])]),r._v(" "),e("tr",[e("td",[r._v("错误处理方式")]),r._v(" "),e("td",[r._v("由onerror插件处理")]),r._v(" "),e("td",[r._v("业务可扩展处理")]),r._v(" "),e("td",[r._v("业务处理")])]),r._v(" "),e("tr",[e("td",[r._v("可识别")]),r._v(" "),e("td",[r._v("否")]),r._v(" "),e("td",[r._v("是")]),r._v(" "),e("td",[r._v("是")])]),r._v(" "),e("tr",[e("td",[r._v("属性扩展")]),r._v(" "),e("td",[r._v("否")]),r._v(" "),e("td",[r._v("是")]),r._v(" "),e("td",[r._v("是")])])])]),r._v(" "),e("p",[r._v("类名只是用来区分三种错误，继承可以自定义")]),r._v(" "),e("p",[r._v("所有的类均继承自Error类，并定义BaseError类，集成子BaseError的错误是可以被识别的，而其他三方继承Error的类都发被识别。")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("class BaseError extends Error {}\n\nclass HttpClientError extends BaseError {}\nclass HttpServerError extends BaseError {}\n\nBaseError.check(BaseError); // true\nBaseError.check(Error); // false\n")])])]),e("p",[r._v("如果业务跑出自定义的系统异常和业务错误，可直接在错误里面处理，为捕获异常在onerror中处理")]),r._v(" "),e("p",[r._v("即成的错误可增加额外的属性，比如HttpError可增加额外属性，比如HttpError可增加status属性作为处理函数的输入")]),r._v(" "),e("h4",{attrs:{id:"字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字段"}},[r._v("#")]),r._v(" 字段")]),r._v(" "),e("p",[r._v("标准字段包括")]),r._v(" "),e("ul",[e("li",[e("p",[r._v("name：一般为类名，如NotFoundError")])]),r._v(" "),e("li",[e("p",[r._v("message: 错误的具体信息，可读的，如404 Not Found")])]),r._v(" "),e("li",[e("p",[r._v("code：答谢的字符串，描述错误，如NOT_FOUND\nhttp扩展")])]),r._v(" "),e("li",[e("p",[r._v("status: http状态码，400")])])]),r._v(" "),e("h3",{attrs:{id:"错误抛出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#错误抛出"}},[r._v("#")]),r._v(" 错误抛出")]),r._v(" "),e("p",[r._v("自行在代码里面引入对应的类")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("import { http } from 'egg-errors';\n\nclass User extends Controller {\n  async show() {\n    this.check(this.params.id);\n\n    // 继续处理\n  }\n\n  check(id) {\n    if (!id) throw new http.UnprocessableEntityError('id is required');\n  }\n}\n")])])]),e("p",[r._v("自定义类")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("import { BaseError } from 'egg-errors';\n\nclass CustomError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.code = 'CUSTOM_ERROR';\n  }\n}\n\nthrow new CustomError('xxx');\n")])])]),e("h3",{attrs:{id:"错误处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[r._v("#")]),r._v(" 错误处理")]),r._v(" "),e("p",[r._v("错误处理是最核心的功能，有如下规则：")]),r._v(" "),e("ol",[e("li",[r._v("未捕获异常不错处理，向上抛")]),r._v(" "),e("li",[r._v("系统异常会打印错误日志，但是会按照标准格式format")]),r._v(" "),e("li",[r._v("业务异常根据标准格式format")]),r._v(" "),e("li",[r._v("根据内容协商，返回对应的format值")]),r._v(" "),e("li",[r._v("可自定义format")])]),r._v(" "),e("p",[r._v("标准format")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v('{\n  "code": "",\n  "message": ""\n}\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);