(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{413:function(t,e,n){"use strict";n.r(e);var a=n(54),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"使用appveyor和travis自动构建和发布electron应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用appveyor和travis自动构建和发布electron应用"}},[t._v("#")]),t._v(" 使用AppVeyor和Travis自动构建和发布Electron应用")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9403248-4d9248d6fb157d02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"https://upload-images.jianshu.io/upload_images/9403248-4d9248d6fb157d02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"}})]),t._v(" "),n("h2",{attrs:{id:"前沿"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前沿"}},[t._v("#")]),t._v(" 前沿")]),t._v(" "),n("p",[t._v("Electron应用在开发以后，本地运行build只能打包相对于的环境。如在Mac下运行只能打包dmg不能兼顾其他平台。为了解决这个痛点，就有了这篇文章。")]),t._v(" "),n("p",[t._v("简单说一下构建和发布流程：主要是配置工具"),n("a",{attrs:{href:"https://github.com/electron-userland/electron-builder",target:"_blank",rel:"noopener noreferrer"}},[t._v("elertron-builder"),n("OutboundLink")],1),t._v("，配置"),n("a",{attrs:{href:"https://travis-ci.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travis"),n("OutboundLink")],1),t._v("一构建Linux和Mac应用，配置"),n("a",{attrs:{href:"https://www.appveyor.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("appveyor"),n("OutboundLink")],1),t._v("以构建Windows应用，当提交到GitHub代码后，CI自动拉去代码，运行 electron-builder相关命令，生成一个平台的安装包，并将安装包推送到GitHub Release中。")]),t._v(" "),n("p",[t._v("在使用git提交代码后，CI自动构建并发布。")]),t._v(" "),n("h2",{attrs:{id:"准备条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备条件"}},[t._v("#")]),t._v(" 准备条件")]),t._v(" "),n("ol",[n("li",[t._v("Github账户")]),t._v(" "),n("li",[t._v("Appveyor账户")]),t._v(" "),n("li",[t._v("Travis账户")]),t._v(" "),n("li",[t._v("基于Electron-vue脚手架构建的项目（非必须）")]),t._v(" "),n("li",[t._v("项目基于electron-builder打包（非必须）")])]),t._v(" "),n("h3",{attrs:{id:"配置项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置项目"}},[t._v("#")]),t._v(" 配置项目")]),t._v(" "),n("p",[t._v("编辑本地的package.json")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n  "name": "electron-v2er",\n  "version": "0.0.1",\n  "author": "ruicky <xxx@163.com>",\n  "homepage":"https://github.com/ruicky/electron-v2ex",\n  "description": "An electron-vue project",\n  "license": "MIT",\n  "main": "./dist/electron/main.js",\n  "scripts": {\n    "build": "node .electron-vue/build.js && electron-builder --publish always"\n    ..\n  }\n\n  ...\n\n   "mac": {\n      "icon": "build/icons/v2ex.icns",\n      "category": "public.app-category.utilities"\n    },\n    "win": {\n      "icon": "build/icons/v2ex.ico",\n      "target": "nsis"\n    },\n    "linux": {\n      "icon": "build/icons",\n      "category": "Utility",\n      "target": [\n        "deb",\n        "AppImage"\n      ]\n    }\n\n    ...\n\n')])])]),n("p",[t._v("说明：")]),t._v(" "),n("ul",[n("li",[t._v("其中的name（项目名称）version（项目版本）author（作者信息）description（x项目描述）license（开源协议）都需要填写，否则在编译Linux版本的时候回报错。填写或修改成自己的参数即可。可参考[Metadata]（https://www.electron.build/configuration/configuration#metadata）参数解释")]),t._v(" "),n("li",[t._v("再scripts中的build添加--publish always可参考"),n("a",{attrs:{href:"https://www.electron.build/configuration/publish#how-to-publish",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to Publish"),n("OutboundLink")],1),t._v("里的参数解释")])]),t._v(" "),n("h3",{attrs:{id:"生成github的gh-token"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生成github的gh-token"}},[t._v("#")]),t._v(" 生成GitHub的GH_TOKEN")]),t._v(" "),n("p",[t._v("electron-builder需要GH_TOKEN（GitHub Personal access token）才有权限上传文件到GitHub Release中。可在"),n("a",{attrs:{href:"https://github.com/settings/tokens",target:"_blank",rel:"noopener noreferrer"}},[t._v("Personal access tokens"),n("OutboundLink")],1),t._v("页面进行生成，由于只会显示一次，注意保存好。再创建的时候只需要勾选repo->public_repo即可。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9403248-183756982726d1f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"github_tokeb.png"}})]),t._v(" "),n("h3",{attrs:{id:"配置ci"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置ci"}},[t._v("#")]),t._v(" 配置CI")]),t._v(" "),n("h4",{attrs:{id:"appveyor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#appveyor"}},[t._v("#")]),t._v(" AppVeyor")]),t._v(" "),n("p",[t._v("在本地项目根目录中添加文件appveyor.yml，具体可以参考一下示例配置，几乎不用修改。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("version: 0.1.{build}\n\nbranches:\n  only:\n    - master\n\nimage: Visual Studio 2017\nplatform:\n  - x64\n\ncache:\n  - node_modules\n  - '%APPDATA%\\npm-cache'\n  - '%USERPROFILE%\\.electron'\n  - '%USERPROFILE%\\AppData\\Local\\Yarn\\cache'\n\ninit:\n  - git config --global core.autocrlf input\n\ninstall:\n  - ps: Install-Product node 8 x64\n  - git reset --hard HEAD\n  - yarn\n  - node --version\n\nbuild_script:\n  #- yarn test\n  - yarn build\n\ntest: off\n")])])]),n("ol",[n("li",[n("p",[t._v("创建项目")]),t._v(" "),n("ul",[n("li",[t._v("然后打开"),n("a",{attrs:{href:"https://ci.appveyor.com/projects/new",target:"_blank",rel:"noopener noreferrer"}},[t._v("Appveyor"),n("OutboundLink")],1),t._v("项目页，点击左边的"),n("strong",[t._v("NEW PROJECT")]),t._v("按钮，然后选择你要自动化的仓库。")])])]),t._v(" "),n("li",[n("p",[t._v("设置")])])]),t._v(" "),n("ul",[n("li",[t._v("回到首页选择创建好的项目")]),t._v(" "),n("li",[t._v("点击"),n("strong",[t._v("Setting")]),t._v("Tab")]),t._v(" "),n("li",[t._v("在"),n("strong",[t._v("Environment")]),t._v("填写GH_TOKEN的值，点击页面下面的“保存”\n"),n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9403248-0e60ebb16fac1a56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"appveyor.png"}})]),t._v(" "),n("li",[t._v("在 Deployment 中配置部署的结果页，选择 GitHub Releases 并填写之前生成好的 GH_TOKEN，点击页面最下面的“保存”\n"),n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9403248-651f498db99a8efb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"appveyor1.png"}})])]),t._v(" "),n("h3",{attrs:{id:"tavis"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tavis"}},[t._v("#")]),t._v(" Tavis")]),t._v(" "),n("p",[t._v("在项目的根目录创建文件 .travis.yml 然后参考下面的配置写入，大部分不用修改。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# Commented sections below can be used to run tests on the CI server\n# https://simulatedgreg.gitbooks.io/electron-vue/content/en/testing.html#on-the-subject-of-ci-testing\nosx_image: xcode8.3\nsudo: required\ndist: trusty\nlanguage: c\nmatrix:\n  include:\n  - os: osx\n  - os: linux\n    env: CC=clang CXX=clang++ npm_config_clang=1\n    compiler: clang\ncache:\n  directories:\n  - node_modules\n  - "$HOME/.electron"\n  - "$HOME/.cache"\naddons:\n  apt:\n    packages:\n    - libgnome-keyring-dev\n    - icnsutils\n    #- xvfb\nbefore_install:\n- mkdir -p /tmp/git-lfs && curl -L https://github.com/github/git-lfs/releases/download/v1.2.1/git-lfs-$([\n  "$TRAVIS_OS_NAME" == "linux" ] && echo "linux" || echo "darwin")-amd64-1.2.1.tar.gz\n  | tar -xz -C /tmp/git-lfs --strip-components 1 && /tmp/git-lfs/git-lfs pull\n- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install --no-install-recommends -y icnsutils graphicsmagick xz-utils; fi\ninstall:\n#- export DISPLAY=\':99.0\'\n#- Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\n- nvm install 9\n- curl -o- -L https://yarnpkg.com/install.sh | bash\n- source ~/.bashrc\n- npm install -g xvfb-maybe\n- yarn\nscript:\n#- xvfb-maybe node_modules/.bin/karma start test/unit/karma.conf.js\n#- yarn run pack && xvfb-maybe node_modules/.bin/mocha test/e2e\n- yarn run build\nbranches:\n  only:\n  - master\n')])])]),n("ol",[n("li",[t._v("进入 travis官网， 点击 GitHub 登录 可自动同步项目到 travis")]),t._v(" "),n("li",[t._v("选择要 配置的项目")]),t._v(" "),n("li",[t._v("选择项目右边的 setting")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9403248-38dd60af3d2aa917.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"travis1.png"}})]),t._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[t._v("填写 GB_TOEN的值\n"),n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/9403248-42fdc3fd09aa6ac6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"travis2.png"}})])]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("按照上述的配置，就能够自动化的部署了。在配置的过程中由于是 electron-vue 脚手架生成的项目，在 package.json 中有些节点没有，导致在 build linux 环境的时候报错。所以建议，按照上面的说明都配置上。")])])}),[],!1,null,null,null);e.default=r.exports}}]);