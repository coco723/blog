{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{506:function(n,e,t){\"use strict\";t.r(e);var a=t(54),l=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"文本转换为markdown实现\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文本转换为markdown实现\"}},[n._v(\"#\")]),n._v(\" 文本转换为markdown实现\")]),n._v(\" \"),t(\"p\",[n._v(\"将后端返回的文本转换为markdown，显示为HTML页面\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"转换为markdown\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#转换为markdown\"}},[n._v(\"#\")]),n._v(\" 转换为markdown\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('//markdown.js\\n\\n// https://www.cherylgood.cn/detail/5bdaf4722382b4646c27143b.html\\nconst highlight = require(\"highlight.js\");\\nconst marked = require(\"marked\");\\nconst tocObj = {\\n  add: function (text, level) {\\n    var anchor = `#toc${level}${++this.index}`;\\n    this.toc.push({ anchor: anchor, level: level, text: text });\\n    return anchor;\\n  },\\n  toHTML: function () {\\n    let levelStack = [];\\n    let result = \"\";\\n    const addStartUL = () => {\\n      result += \\'<ul class=\"anchor-ul\" id=\"anchor-fix\">\\';\\n    };\\n    const addEndUL = () => {\\n      result += \"</ul>\\\\n\";\\n    };\\n    const addLI = (anchor, text) => {\\n      result +=\\n        \\'<li><a class=\"toc-link\" href=\"#\\' + anchor + \\'\">\\' + text + \"<a></li>\\\\n\";\\n    };\\n\\n    this.toc.forEach(function (item) {\\n      let levelIndex = levelStack.indexOf(item.level);\\n      // 没有找到相应level的ul标签，则将li放入新增的ul中\\n      if (levelIndex === -1) {\\n        levelStack.unshift(item.level);\\n        addStartUL();\\n        addLI(item.anchor, item.text);\\n      } // 找到了相应level的ul标签，并且在栈顶的位置则直接将li放在此ul下\\n      else if (levelIndex === 0) {\\n        addLI(item.anchor, item.text);\\n      } // 找到了相应level的ul标签，但是不在栈顶位置，需要将之前的所有level出栈并且打上闭合标签，最后新增li\\n      else {\\n        while (levelIndex--) {\\n          levelStack.shift();\\n          addEndUL();\\n        }\\n        addLI(item.anchor, item.text);\\n      }\\n    });\\n    // 如果栈中还有level，全部出栈打上闭合标签\\n    while (levelStack.length) {\\n      levelStack.shift();\\n      addEndUL();\\n    }\\n    this.toc = [];\\n    this.index = 0;\\n    return result;\\n  },\\n  toc: [],\\n  index: 0\\n};\\n\\nclass MarkUtils {\\n  constructor() {\\n    this.rendererMD = new marked.Renderer();\\n    this.rendererMD.heading = function (text, level, raw) {\\n      var anchor = tocObj.add(text, level);\\n      return `<h${level} id=${anchor}>${text}</h${level}>\\\\n`;\\n    };\\n    this.rendererMD.table = function (header, body) {\\n      return \\'<table class=\"table\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\\' + header + body + \\'</table>\\'\\n    }\\n    highlight.configure({ useBR: true });\\n    marked.setOptions({\\n      renderer: this.rendererMD,\\n      headerIds: false,\\n      gfm: true,\\n      tables: true,\\n      breaks: false,\\n      pedantic: false,\\n      sanitize: false,\\n      smartLists: true,\\n      smartypants: false,\\n      highlight: function (code) {\\n        return highlight.highlightAuto(code).value;\\n      }\\n    });\\n  }\\n\\n  async marked(data) {\\n    if (data) {\\n      let content = await marked(data);\\n      let toc = tocObj.toHTML();\\n      return { content: content, toc: toc };\\n    } else {\\n      return null;\\n    }\\n  }\\n}\\n\\nconst markdown = new MarkUtils();\\n\\nexport default markdown;\\n\\n')])])]),t(\"h2\",{attrs:{id:\"调用转换\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#调用转换\"}},[n._v(\"#\")]),n._v(\" 调用转换\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"// 在其他文件中引用\\n\\nconst contentmd = markdown.marked(content);\\ncontentmd.then(md => {\\n  // 进一步处理\\n})；\\n\")])])]),t(\"h2\",{attrs:{id:\"页面渲染处理\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#页面渲染处理\"}},[n._v(\"#\")]),n._v(\" 页面渲染处理\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('// 示例\\n<div className=\"content\">\\n  <div\\n    id=\"content\"\\n    className=\"article-detail\"\\n    dangerouslySetInnerHTML={{\\n      __html: content ? content : null,\\n    }}\\n  />\\n</div>\\n')])])])])}),[],!1,null,null,null);e.default=l.exports}}]);","extractedComments":[]}