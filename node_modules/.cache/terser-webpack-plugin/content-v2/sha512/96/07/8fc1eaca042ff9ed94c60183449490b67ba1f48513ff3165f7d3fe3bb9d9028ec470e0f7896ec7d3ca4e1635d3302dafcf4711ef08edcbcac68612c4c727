{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{460:function(a,e,t){\"use strict\";t.r(e);var s=t(54),l=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"make命令教程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#make命令教程\"}},[a._v(\"#\")]),a._v(\" Make命令教程\")]),a._v(\" \"),t(\"p\",[a._v(\"代码编程可执行文件，叫做编译（compile）；\\n先编译这个还是那个（即编译的安排），叫做构建（build）\")]),a._v(\" \"),t(\"p\",[a._v(\"Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"一、make的概念\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、make的概念\"}},[a._v(\"#\")]),a._v(\" 一、Make的概念\")]),a._v(\" \"),t(\"p\",[a._v(\"Make这个词，就是要做出某个文件。比如，要做出文件a.txt,就可以执行下面的命令\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"$ make a.txt\\n\")])])]),t(\"p\",[a._v(\"但是，如果你真的输入这条命令，它并不会其作用。因为Make命令本身并不知道，如何作出a.txt，需要有人告诉它，如何调用其他命令完成这个目标\")]),a._v(\" \"),t(\"p\",[a._v(\"比如，假设文件a.txt依赖于b.txt和c.txt,是后面两个文件连接（cat命令）的产物。那么，make需要知道下面的规则。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"a.txt: b.txt c.txt\\n    cat b.txt c.txt > a.txt\\n\")])])]),t(\"p\",[a._v(\"也就是说，make a.txt这条命令的背后，实际上分为两步：第一步，确认b.txt和c.txt必须已经存在，第二步使用cat命令 将两个文件合并，输出为新文件\")]),a._v(\" \"),t(\"p\",[a._v(\"像这样的规则，都写在一个Makefile文件中，Make命令依赖这个文件进行构建。Makefile文件也可以写为makefile，或者用命令行参数指定为掐文件名\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"$ make -f rules.txt\\n# 或者\\n$ make --file=rules.txt\\n\")])])]),t(\"p\",[t(\"em\",[t(\"strong\",[a._v(\"总之，make只是一个根据制定的Shell命令进行构建的工具。它的规则很简单，你规定要构建哪个文件、它依赖哪些源文件，当那些文件有变动时，如何重新构建它。\")])])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"二、makefile文件的格式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、makefile文件的格式\"}},[a._v(\"#\")]),a._v(\" 二、Makefile文件的格式\")]),a._v(\" \"),t(\"p\",[a._v(\"构建规则都写在Makefile文件李买呢，要学会如何如何Make命令，就必须学会如何编写Makefile文件\")]),a._v(\" \"),t(\"p\",[a._v(\"2.1 概述\")]),a._v(\" \"),t(\"p\",[a._v(\"Makefile文件由一系列规则（rules）构成。每条规则的形式如下：\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"<target> : <prerequisites>\\n[tab]  <commands>\\n\")])])]),t(\"p\",[a._v('上面第一行冒号前面的部分，叫做\"目标\"（target），冒号后面的部分叫做\"前置条件\"（prerequisites）；第二行必须由一个tab键起首，后面跟着\"命令\"（commands）。')]),a._v(\" \"),t(\"p\",[a._v('\"目标\"是必需的，不可省略；\"前置条件\"和\"命令\"都是可选的，但是两者之中必须至少存在一个。')]),a._v(\" \"),t(\"p\",[a._v(\"每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建。下面就详细讲解，每条规则的这三个组成部分。\")]),a._v(\" \"),t(\"p\",[a._v(\"例子：\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"test: lint\\n\\tyarn ci\\n\")])])]),t(\"p\",[a._v(\"2.2 目标（target）\")]),a._v(\" \"),t(\"p\",[a._v(\"一个目标就构成一条规则。目标通常是文件名，指明Make命令所要构建的对象，比如上下文的a.txt。目标可以时一个文件名，指明Make命令所要构建的对象，比如上文的a.txt。目标可以时一个文件名，也可以时多个文件名，之间用空格分割。\")]),a._v(\" \"),t(\"p\",[a._v(\"除了文件名，目标还可以是某个操作的名字，这称为“伪目标”\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"\\nclean:\\n      rm *.o\\n\")])])]),t(\"p\",[a._v('上面代码的目标是clean，它不是文件名，而是一个操作的名字，属于\"伪目标 \"，作用是删除对象文件。')]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"$ make  clean\\n\")])])]),t(\"p\",[a._v(\"但是，如果当前目录中，正好有一个文件叫做clean，那么这个命令不会执行。因为Make发现clean文件已经存在，就认为没有必要重新构建了，就不会执行指定的rm命令。\")]),a._v(\" \"),t(\"p\",[a._v('为了避免这种情况，可以明确声明clean是\"伪目标\"，写法如下。')]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\".PHONY: clean\\nclean:\\n        rm *.o temp\\n\")])])]),t(\"p\",[a._v('声明clean是\"伪目标\"之后，make就不会去检查是否存在一个叫做clean的文件，而是每次运行都执行对应的命令。像'),t(\"code\",[a._v(\".PHONY\")]),a._v(\"这样的内置目标名还有不少，可以查看手册。\")]),a._v(\" \"),t(\"p\",[a._v(\"如果Make命令运行时没有指定目标，默认会执行Makefile文件的第一个目标。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"$ make\\n\")])])]),t(\"p\",[a._v(\"上面代码执行Makefile文件的第一个目标。\")]),a._v(\" \"),t(\"p\",[a._v(\"2.3 前置条件\")]),a._v(\" \"),t(\"p\",[a._v('前置条件通常是一组文件名，之间用空格分隔。它指定了\"目标\"是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的'),t(\"code\",[a._v(\"last-modification\")]),a._v('时间戳比目标的时间戳新），\"目标\"就需要重新构建。')]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"result.txt: source.txt\\n    cp source.txt result.txt\\n\")])])]),t(\"p\",[a._v(\"上面代码中，构建 result.txt 的前置条件是 source.txt 。如果当前目录中，source.txt 已经存在，那么make result.txt可以正常运行，否则必须再写一条规则，来生成 source.txt 。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('source.txt:\\n    echo \"this is the source\" > source.txt\\n')])])]),t(\"p\",[a._v(\"上面代码中，source.txt后面没有前置条件，就意味着它跟其他文件都无关，只要这个文件还不存在，每次调用make source.txt，它都会生成。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"\\n$ make result.txt\\n$ make result.txt\\n\")])])]),t(\"p\",[a._v(\"上面命令连续执行两次make result.txt。第一次执行会先新建 source.txt，然后再新建 result.txt。第二次执行，Make发现 source.txt 没有变动（时间戳晚于 result.txt），就不会执行任何操作，result.txt 也不会重新生成。\")]),a._v(\" \"),t(\"p\",[a._v(\"如果需要生成多个文件，往往采用下面的写法。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"source: file1 file2 file3\\n\")])])]),t(\"p\",[a._v(\"上面代码中，source 是一个伪目标，只有三个前置文件，没有任何对应的命令。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"$ make source\\n\")])])]),t(\"p\",[a._v(\"执行make source命令后，就会一次性生成file1、file2、 file3三个文件\")]),a._v(\" \"),t(\"p\",[a._v(\"2.4 命令\")]),a._v(\" \"),t(\"p\",[a._v('命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成。它是构建\"目标\"的具体指令，它的运行结果通常就是生成目标文件。')]),a._v(\" \"),t(\"p\",[a._v(\"每行命令之前必须有一个tab键。如果想用其他键，可以用内置变量.RECIPEPREFIX声明。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\".RECIPEPREFIX = >\\nall:\\n> echo Hello, world\\n\")])])]),t(\"p\",[a._v(\"上面代码用.RECIPEPREFIX指定，大于号\"),t(\"code\",[a._v(\"（>）\")]),a._v(\"替代tab键。所以，每一行命令的起首变成了大于号，而不是tab键。\")]),a._v(\" \"),t(\"p\",[a._v(\"需要注意的是，每行命令在一个单独的shell中执行。这些Shell之间没有继承关系。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('\\nvar-lost:\\n    export foo=bar\\n    echo \"foo=[$$foo]\"\\n')])])]),t(\"p\",[a._v(\"上面代码执行后\"),t(\"code\",[a._v(\"（make var-lost）\")]),a._v(\"，取不到foo的值。因为两行命令在两个不同的进程执行。一个解决办法是将两行命令写在一行，中间用分号分隔。\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"三、makefile文件的语法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、makefile文件的语法\"}},[a._v(\"#\")]),a._v(\" 三、Makefile文件的语法\")]),a._v(\" \"),t(\"p\",[a._v(\"3.1 注释\\n井号\"),t(\"code\",[a._v(\"（#）\")]),a._v(\"在Makefile表示注释\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"# 这是注释\\nresult.txt: source.txt\\n    # 这是注释\\n    cp source.txt result.txt # 这也是注释\\n\")])])]),t(\"p\",[a._v(\"3.2 回声（echoing）\")]),a._v(\" \"),t(\"p\",[a._v(\"正常情况下，make会打印每条命令，然后再执行，这就叫做回声（echoing）\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"test:\\n    # 这是测试\\n\\n\")])])]),t(\"p\",[a._v(\"执行上面的规则，会得到下面的结果。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"$ make test\\n# 这是测试\\n\")])])]),t(\"p\",[a._v(\"在命令的前面加上\"),t(\"code\",[a._v(\"@\")]),a._v(\"，就可以关闭回声。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"test:\\n    @# 这是测试\\n\")])])]),t(\"p\",[a._v(\"现在再执行make test，就不会有任何输出。\")]),a._v(\" \"),t(\"p\",[a._v(\"由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上\"),t(\"code\",[a._v(\"@\")]),a._v(\"。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"test:\\n    @# 这是测试\\n    @echo TODO\\n\")])])]),t(\"p\",[a._v(\"3.3 通配符\")]),a._v(\" \"),t(\"p\",[a._v(\"通配符（wildcard）用来指定一组符合条件的文件名。Makefile 的通配符与 Bash 一致，主要有星号\"),t(\"code\",[a._v(\"（*）\")]),a._v(\"、问号\"),t(\"code\",[a._v(\"（？）\")]),a._v(\"和 \"),t(\"code\",[a._v(\"[...]\")]),a._v(\" 。比如， \"),t(\"code\",[a._v(\"*.o\")]),a._v(\" 表示所有后缀名为o的文件。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"clean:\\n        rm -f *.o\\n\")])])]),t(\"p\",[a._v(\"3.4 模式匹配\")]),a._v(\" \"),t(\"p\",[a._v(\"Make命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"%.o: %.c\\n\")])])]),t(\"p\",[a._v(\"等同于下面的写法。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"f1.o: f1.c\\nf2.o: f2.c\\n\")])])]),t(\"p\",[a._v(\"使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。\")]),a._v(\" \"),t(\"p\",[a._v(\"3.5 变量和赋值符\")]),a._v(\" \"),t(\"p\",[a._v(\"Makefile 允许使用等号自定义变量。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"txt = Hello World\\ntest:\\n    @echo $(txt)\\n\")])])]),t(\"p\",[a._v(\"上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 \"),t(\"code\",[a._v(\"$( )\")]),a._v(\" 之中。\")]),a._v(\" \"),t(\"p\",[a._v(\"调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"test:\\n    @echo $$HOME\\n\")])])]),t(\"p\",[a._v(\"有时，变量的值可能指向另一个变量。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"v1 = ${v2}\\n\")])])]),t(\"p\",[a._v(\"上面代码中，变量 v1 的值是另一个变量 v2。这时会产生一个问题，v1 的值到底在定义时扩展（静态扩展），还是在运行时扩展（动态扩展）\"),t(\"code\",[a._v(\"？\")]),a._v(\"如果 v2 的值是动态的，这两种扩展方式的结果可能会差异很大。\")]),a._v(\" \"),t(\"p\",[a._v(\"为了解决类似问题，Makefile一共提供了四个赋值运算符 \"),t(\"code\",[a._v(\"（=、:=、？=、+=）\")]),a._v(\"，它们的区别请看StackOverflow。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"VARIABLE = value\\n# 在执行时扩展，允许递归扩展。\\n\\nVARIABLE := value\\n# 在定义时扩展。\\n\\nVARIABLE ?= value\\n# 只有在该变量为空时才设置值。\\n\\nVARIABLE += value\\n# 将值追加到变量的尾端\\n\")])])]),t(\"p\",[a._v(\"3.6 内置变量\")]),a._v(\" \"),t(\"p\",[a._v(\"Make命令提供一系列内置变量，比如，\"),t(\"code\",[a._v(\"$(CC)\")]),a._v(\" 指向当前使用的编译器，\"),t(\"code\",[a._v(\"$(MAKE)\")]),a._v(\" 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见手册。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"output:\\n    $(CC) -o output input.c\\n\\n\")])])]),t(\"p\",[a._v(\"3.7 自动变量\")]),a._v(\" \"),t(\"p\",[a._v(\"Make命令还提供一些自动变量，它们的值与当前规则有关。主要有以下几个。\")]),a._v(\" \"),t(\"p\",[a._v(\"（1）\"),t(\"code\",[a._v(\"$@\")])]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"$@\")]),a._v(\"指代当前目标，就是Make命令当前构建的那个目标。比如，make foo的 \"),t(\"code\",[a._v(\"$@\")]),a._v(\" 就指代foo。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"a.txt b.txt:\\n    touch $@\\n\")])])]),t(\"p\",[a._v(\"等同于下面的写法。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"a.txt:\\n    touch a.txt\\nb.txt:\\n    touch b.txt\\n\")])])]),t(\"p\",[a._v(\"（2）\"),t(\"code\",[a._v(\"$<\")])]),a._v(\" \"),t(\"p\",[t(\"code\",[a._v(\"$<\")]),a._v(\" 指代第一个前置条件。比如，规则为 t: p1 p2，那么\"),t(\"code\",[a._v(\"$<\")]),a._v(\" 就指代p1。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"a.txt: b.txt c.txt\\n    cp $< $@\\n\")])])]),t(\"p\",[a._v(\"等同于下面的写法。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"a.txt: b.txt c.txt\\n    cp b.txt a.txt\\n\")])])]),t(\"p\",[a._v(\"3.8 判断和循环\")]),a._v(\" \"),t(\"p\",[a._v(\"Makefile使用Bash语法，完成判断和循环\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"ifeq ($(CC),gcc)\\n  libs=$(libs_for_gcc)\\nelse\\n  libs=$(normal_libs)\\nendif\\n\")])])]),t(\"p\",[a._v(\"上面代码判断当前编译器是否 gcc ，然后指定不同的库文件。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"LIST = one two three\\nall:\\n    for i in $(LIST); do \\\\\\n        echo $$i; \\\\\\n    done\\n\\n# 等同于\\n\\nall:\\n    for i in one two three; do \\\\\\n        echo $i; \\\\\\n    done\\n\\n\")])])]),t(\"p\",[a._v(\"上面代码的运行结果。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"one\\ntwo\\nthree\\n\")])])])])}),[],!1,null,null,null);e.default=l.exports}}]);","extractedComments":[]}